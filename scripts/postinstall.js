/**
 * Script ch·∫°y sau khi c√†i ƒë·∫∑t g√≥i tor_proxy
 * Script n√†y s·∫Ω ki·ªÉm tra v√† sao ch√©p tor.exe v√†o c√°c v·ªã tr√≠ th√≠ch h·ª£p
 */

const fs = require('fs');
const path = require('path');

// C√°c ƒë∆∞·ªùng d·∫´n quan tr·ªçng
const packageRoot = path.resolve(__dirname, '..');
const binDir = path.join(packageRoot, 'bin');
const torExeSrc = path.join(packageRoot, 'tor.exe');
const torExeBin = path.join(binDir, 'tor.exe');

function logSuccess(message) {
  console.log('\x1b[32m%s\x1b[0m', message); // M√†u xanh l√°
}

function logWarning(message) {
  console.log('\x1b[33m%s\x1b[0m', message); // M√†u v√†ng
}

function logError(message) {
  console.log('\x1b[31m%s\x1b[0m', message); // M√†u ƒë·ªè
}

function ensureBinDirectory() {
  // T·∫°o th∆∞ m·ª•c bin n·∫øu ch∆∞a t·ªìn t·∫°i
  if (!fs.existsSync(binDir)) {
    try {
      fs.mkdirSync(binDir, { recursive: true });
      logSuccess('‚úì ƒê√£ t·∫°o th∆∞ m·ª•c bin: ' + binDir);
    } catch (error) {
      logError('‚úó L·ªói khi t·∫°o th∆∞ m·ª•c bin: ' + error.message);
    }
  }
}

function copyTorExecutable() {
  // Ki·ªÉm tra n·∫øu tor.exe t·ªìn t·∫°i ·ªü th∆∞ m·ª•c g·ªëc
  if (fs.existsSync(torExeSrc)) {
    // Ki·ªÉm tra n·∫øu tor.exe ƒë√£ c√≥ s·∫µn trong th∆∞ m·ª•c bin
    if (!fs.existsSync(torExeBin)) {
      try {
        // Sao ch√©p tor.exe v√†o th∆∞ m·ª•c bin
        fs.copyFileSync(torExeSrc, torExeBin);
        logSuccess('‚úì ƒê√£ sao ch√©p tor.exe v√†o th∆∞ m·ª•c bin: ' + torExeBin);
      } catch (error) {
        logError('‚úó L·ªói khi sao ch√©p tor.exe: ' + error.message);
      }
    } else {
      logSuccess('‚úì tor.exe ƒë√£ t·ªìn t·∫°i trong th∆∞ m·ª•c bin: ' + torExeBin);
    }
  } else {
    logWarning(`
===================================================================
‚ö†Ô∏è  C·∫¢NH B√ÅO: Kh√¥ng t√¨m th·∫•y tor.exe trong g√≥i.
   Vui l√≤ng t·∫£i xu·ªëng tor.exe t·ª´ ngu·ªìn ch√≠nh th·ª©c v√† ƒë·∫∑t v√†o m·ªôt 
   trong c√°c v·ªã tr√≠ sau:
   - ${path.join(process.cwd(), 'tor.exe')}
   - ${path.join(process.cwd(), 'bin', 'tor.exe')}

   ƒê∆∞·ªùng d·∫´n hi·ªán t·∫°i ƒëang t√¨m ki·∫øm tor.exe: ${torExeSrc}

   T·∫£i Tor Browser ƒë·ªÉ l·∫•y tor.exe: https://www.torproject.org/download/

   Ho·∫∑c ch·ªâ ƒë·ªãnh ƒë∆∞·ªùng d·∫´n ƒë·∫ßy ƒë·ªß khi kh·ªüi t·∫°o TorProxy:
   const proxy = new TorProxy({ torPath: '/ƒë∆∞·ªùng/d·∫´n/ƒë·∫øn/tor.exe' });
===================================================================
    `);
  }
}

// Ch·ªâ ch·∫°y trong m√¥i tr∆∞·ªùng s·∫£n xu·∫•t ho·∫∑c khi ƒë∆∞·ª£c c√†i ƒë·∫∑t t·ª´ npm
// Tr√°nh ch·∫°y trong qu√° tr√¨nh ph√°t tri·ªÉn ho·∫∑c testing
if (process.env.NODE_ENV !== 'test' && process.env.NODE_ENV !== 'development') {
  try {
    console.log('üîÑ ƒêang c·∫•u h√¨nh tor_proxy...');
    ensureBinDirectory();
    copyTorExecutable();
    logSuccess('‚úì C√†i ƒë·∫∑t tor_proxy ƒë√£ ho√†n t·∫•t.');
    console.log('üìå ƒê·ªÉ s·ª≠ d·ª•ng, h√£y xem h∆∞·ªõng d·∫´n trong t·ªáp README.md');
  } catch (error) {
    logError('‚úó L·ªói trong qu√° tr√¨nh c√†i ƒë·∫∑t tor_proxy: ' + error);
  }
} 